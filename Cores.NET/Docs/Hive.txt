■ Hive の使い方
HiveData<T> のインスタンスを作成し、これの Data プロパティを get して利用する。


- データの読み取りについて
アプリケーションは、Data プロパティを get した結果である T のインスタンスを、ロックなしで読み取りして安全である。

ただし、Data プロパティの指している先の T のインスタンスは、ストレージ上のデータが置換された後にこれが再読込された際に、瞬時にポインタが置き換わる可能性がある。このポインタ置換は atomic であるため、アプリケーションが不完全なデータを掴まされる危険はないが、ループ処理の内側で Data プロパティを参照している場合は、ループ処理が不正になる場合があるので注意すること。


- データのスナップショット取得について
GetDataCloned() メソッドを利用すると、Data プロパティの指す T のインスタンスの読み取り専用コピーを取得することができる。この読み取り専用コピーにいかなる変更を施しても、ストレージに変更が書き戻されるおそれはない。また、別のスレッドがデータを編集していても、それによって影響されることがない。


- 複数のスレッドがデータを読み書きする可能性がある場合
以下のいずれかを実行すること。

(1) 各スレッド (読み取り、書き込み双方) は、必ず、lock (DataLock) により、ロックを取得する。

(2) 読み取りスレッドは、毎回、GetDataCloned() でスナップショットを取得し、これを読み取り利用する。(ロックする必要はない。) 書き込みスレッドは、必ず、lock (DataLock) により、ロックを取得して書き込みをする。


- ストレージ自動同期機能について
同一の同期処理においては、
(1) まず、メモリ上のデータが変更されていないかどうかを確認し、変更されていた場合はストレージに書き出す。
(2) 次に、ストレージ上のデータが変更されていないかどうかを確認し、変更されていた場合はメモリに読み込む。

なお、(1) で変更がストレージに書き込まれた場合は、そのサイクルにおいては、(2) は実行されない。

したがって、稀にストレージとメモリとの両方が書き換わり競合が発生してしまった場合は、メモリ上の変更が優先され、ストレージ上の変更は破棄される。


