■ TaskAsync.cs - 非同期ライブラリ

--- 背景 ---
非同期処理を実施するタスク (サーバーなど) において、キャンセル可能タスクを以下のとおり定義する。

(1) タスクの作成 - 普通にコンストラクタを呼べば良い。この際、任意で、1 つの CancellationToken を渡すことができる。この CancellationToken を Cancel すればタスクはキャンセル状態になるし、タスク自体の Cancel() メソッドを呼んでキャンセルさせることもできるのである。
    ↓
(2) タスクのキャンセル - 登録済み CancellationToken のいずれかをキャンセル状態にする。タスク自体の Cancel() メソッドを呼んでもよい。
    ↓
(3) タスクの非同期クリーンアップ - 非同期クリーンアップルーチンを呼ぶ (時間がかかる)。
    ※ (3) は、内部的に、事前に (2) を呼ぶ。
    ↓
(4) タスクの解放 - Dispose() を呼ぶ。Dispose は同期メソッドであり、通常は時間がかかる処理を記述するべきではない。
    通常、非同期クリーンアップは、Dispose() の前に非同期メソッドの await によって呼ばれることが最善である。
    万一非同期クリーンアップがされていないリソースでかつクリーンアップに時間がかかるものが残っている場合は、Dispose() によって同期的に解放されることになる。
    Dispose() ですべてのリソースは解放されなければならない。
    ※ (4) は、内部的に、事前に (3) を呼ぶ。したがって、(2) も呼ばれる。

(2) は、呼び出し元コードにおいて、対象インスタンスに対して
    Cancel()
    を呼び出すことによって実施される。

(3) は、呼び出し元コードにおいて、対象インスタンスに対して
    await IAsyncCleanupable->AsyncCleanuper->AsyncCleanuper();
    を呼び出すことによって実施される。

(4) は、呼び出し元コードにおいて、対象インスタンスを安全に囲む using() ブロック
    のスコープが抜けることによって呼び出されることが推奨される。


--- リファレンス ---
AsyncCleanuper - 非同期クリーンアップ可能なインスタンスを非同期クリーンアップするためのヘルパークラス。IAsyncCleanupable なインスタンスに付随する。IAsyncCleanupable を実装する際には AsyncCleanuper {get;} プロパティとして必ず実装しなければならない。

    コンストラクタ - 対象の IAsyncCleanupable のインスタンスを指定して作成。特に何もしない。
    
    AsyncCleanuper() - クリーンアップを非同期に実行する。以下の 2 手順が順に実行される。
               1. 対象インスタンスを Dispose() する。
               2. 対象インスタンスの _CleanupAsyncInternal() を非同期で呼ぶ。


IAsyncCleanupable - 非同期クリーンアップ可能な非同期処理のまとまりを記述するためのインターフェイス。
    AsyncCleanuper プロパティ: 対象インスタンスをクリーンアップするための処理を記述したクラス。
    _CleanupInternalAsync() 非同期メソッド: このインスタンス固有の非同期クリーンアップ処理を記述したメソッド。AsyncCleanuper.CleanupAsync() から呼ばれる。


AsyncCleanupable : IAsyncCleanupable - 非同期クリーンアップ可能な非同期処理のまとまりを記述するための基底抽象クラス。すべての非同期処理実現クラスは、このクラスから派生される。
    コンストラクタ: AsyncCleanuperLady lady を指定する。
        自分自身のための AsyncCleanuper を作成する。
        lady に対して、まず自分自身を Add する。
    Dispose() メソッド:
        OnDispose リストに登録されているすべてのアクションを 1 回ずつ実行。
            ※ 登録と逆順に実行される。
        次に、Lady.DisposeAll() を実行。
    AddOnDispose() メソッド: OnDispose() リストにアクションを登録。
    _CleanupInternalAsync() メソッド (AsyncCleanuper から呼ばれる):
        Dispose() を呼ぶ。
        次に、Lady を非同期で呼び、非同期クリーンアップを実行してもらう。

AsyncCleanupableCancellable : AsyncCleanupable - 非同期クリーンアップおよびキャンセル可能な非同期処理のまとまりを記述するための抽象クラス。
    コンストラクタ: AsyncCleanuperLady lady および 1 個の cancel を指定する。
        自分自身のための CancelWatcher を作成する。
    
    GrandCancel プロパティ:
        CancelWatcher の CancellationToken を取得する。
        すなわち、この処理が誰かによってキャンセルされたことの通知を
        受けることができる CancellationToken を取得するのである。
    
    Dispose() メソッド:
        CancelWatcher を Dispose する。
        次に、base クラス (AsyncCleanupable) の Dispose() を呼ぶ。

    CreatePerTaskCancellationToken() メソッド:
        派生クラスで利用できる便利機能。現在の GrandCancel と、
        任意の追加 CancellationToken を組み合わせて、
        いずれかの CancellationToken が呼ばれたらキャンセル状態になる
        ような CancellationToken を一時的に作成する。
        たとえば、派生クラスにおける機能のキャンセルの際に便利である。
    
    EnterCriticalCounter メソッド:
        インスタンス固有のクリティカルカウンタに入る。
        クリティカルカウンタに入っている処理の分、カウンタが
        インクリメントされる。
        万一オブジェクトの Dispose 処理が開始されている場合は、
        ObjectDisposedException 例外が発生し、
        クリティカルカウンタに入ることができない。

AsyncCleanuperLady - 掃除のおばさん。複数の非同期クリーンアップ可能なインスタンスを実施する主体である。
    

