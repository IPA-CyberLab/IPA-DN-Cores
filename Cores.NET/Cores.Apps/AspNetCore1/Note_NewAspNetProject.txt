新しい ASP.NET Core プロジェクトの作成方法メモ
----------------------------------------------

■ プロジェクトの作成

ソリューションを作成する。

ASP.NET Core Web アプリケーション (C#) を追加する。
    Web アプリケーション (モデル ビュー コントローラ)


■ デバッグ設定の変更

プロファイル「IIS Express」を削除する。

「ブラウザーの起動」を OFF にする。


■ Cores.Web の追加
ソリューションに
「Cores.Web\Cores.Web.csproj」
を追加する。

ASP.NET プロジェクトから Cores.Web に依存設定をする。


■ Cores.Basic.shproj の追加
ソリューションに
「Cores.Basic.shproj」
を追加する。


■ Cores.Codes.shproj の追加
ソリューションに
「Cores.Codes.shproj」
を追加する。


■ Cores.Web.csproj の追加
ソリューションに
「Cores.Web.csproj」
を追加する。


■ ASP.NET Core プロジェクトの編集
・ csproj

以下のプロパティを <PropertyGroup> に追加
---
    <LangVersion>8.0</LangVersion>
    <ServerGarbageCollection>false</ServerGarbageCollection>
    <ConcurrentGarbageCollection>false</ConcurrentGarbageCollection>
    <BlazorWebAssemblyEnableLinking>false</BlazorWebAssemblyEnableLinking>
    <BlazorWebAssemblyI18NAssemblies>all</BlazorWebAssemblyI18NAssemblies>
    <GenerateEmbeddedFilesManifest>true</GenerateEmbeddedFilesManifest>
    <OutputType>Exe</OutputType>
    <Nullable>enable</Nullable>
    <TieredCompilationQuickJit>false</TieredCompilationQuickJit>
    <TieredCompilation>false</TieredCompilation>
    <PublishReadyToRun>true</PublishReadyToRun>
    <PublishReadyToRunShowWarnings>true</PublishReadyToRunShowWarnings>
    <PublishTrimmed>false</PublishTrimmed>
---

既存の </PropertyGroup> の下に以下を追加

---
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DefineConstants></DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DefineConstants>TRACE;DEBUG;</DefineConstants>
  </PropertyGroup>
---

上記で追加した </PropertyGroup> の下に以下を追加
---
  <ItemGroup>
    <Compile Remove="Local\**" />
    <Compile Remove="Log\**" />
    <Content Remove="Local\**" />
    <Content Remove="Log\**" />
    <EmbeddedResource Remove="Local\**" />
    <EmbeddedResource Remove="Log\**" />
    <None Remove="Local\**" />
    <None Remove="Log\**" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="../../../../Cores.NET/Cores.Codes/**/*.cs" />
    <Content Include="../../../../Cores.NET/Cores.Codes/**/*.cshtml" />
    <EmbeddedResource Include="../../../../Cores.NET/Cores.Codes/Resources/**/*" />
  </ItemGroup>

  <Target Name="PreBuild" BeforeTargets="PreBuildEvent" Condition="'$(BuildingInsideVisualStudio)' == 'true'">
    <Exec Command="$(ProjectDir)..\..\..\..\Cores.NET\Dev.Tools\CompiledBin\DebugHost.exe stop $(ProjectName) dotnet exec $(TargetPath) Daemon Test" />
  </Target>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent" Condition="'$(BuildingInsideVisualStudio)' == 'true'">
    <Exec Command="$(ProjectDir)..\..\..\..\Cores.NET\Dev.Tools\CompiledBin\DebugHost.exe start $(ProjectName) dotnet exec $(TargetPath) Daemon Test" />
  </Target>

  <ItemGroup>
    <ProjectReference Include="$(ProjectDir)..\..\..\..\Cores.NET\Cores.Web\Cores.Web.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation" Version="3.1.0" />
    <PackageReference Include="Microsoft.Extensions.FileProviders.Embedded" Version="3.1.0" />
    <PackageReference Include="Microsoft.Extensions.FileProviders.Physical" Version="3.1.0" />
    <PackageReference Include="Microsoft.Extensions.FileProviders.Composite" Version="3.1.0" />
  </ItemGroup>
---

※ submodule 経由の場合

---
  <ItemGroup>
    <Compile Remove="Local\**" />
    <Compile Remove="Log\**" />
    <Content Remove="Local\**" />
    <Content Remove="Log\**" />
    <EmbeddedResource Remove="Local\**" />
    <EmbeddedResource Remove="Log\**" />
    <None Remove="Local\**" />
    <None Remove="Log\**" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="../submodules/IPA-DN-Cores/Cores.NET/Cores.Codes/**/*.cs" />
    <Content Include="../submodules/IPA-DN-Cores/Cores.NET/Cores.Codes/**/*.cshtml" />
    <EmbeddedResource Include="../submodules/IPA-DN-Cores/Cores.NET/Cores.Codes/Resources/**/*" />
  </ItemGroup>

  <Target Name="PreBuild" BeforeTargets="PreBuildEvent" Condition="'$(BuildingInsideVisualStudio)' == 'true'">
    <Exec Command="$(ProjectDir)\\..\\submodules\\IPA-DN-Cores\\Cores.NET\\Dev.Tools\\CompiledBin\\DebugHost.exe stop $(ProjectName) dotnet exec $(TargetPath) Daemon Test" />
  </Target>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent" Condition="'$(BuildingInsideVisualStudio)' == 'true'">
    <Exec Command="$(ProjectDir)\\..\\submodules\\IPA-DN-Cores\\Cores.NET\\Dev.Tools\\CompiledBin\\DebugHost.exe start $(ProjectName) dotnet exec $(TargetPath) Daemon Test" />
  </Target>

  <ItemGroup>
    <ProjectReference Include="..\submodules\IPA-DN-Cores\Cores.NET\Cores.Web\Cores.Web.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation" Version="3.1.0" />
    <PackageReference Include="Microsoft.Extensions.FileProviders.Embedded" Version="3.1.0" />
    <PackageReference Include="Microsoft.Extensions.FileProviders.Physical" Version="3.1.0" />
    <PackageReference Include="Microsoft.Extensions.FileProviders.Composite" Version="3.1.0" />
  </ItemGroup>
---

・ Properties/launchSettings.json

---
{
  "profiles": {
    "DebugHost Run": {
      "commandName": "Executable",
      "executablePath": "$(ProjectDir)..\\..\\..\\..\\Cores.NET\\\\Dev.Tools\\\\CompiledBin\\\\DebugHost.exe",
      "commandLineArgs": "restart $(ProjectName) dotnet exec $(TargetPath) Daemon Test",
      "workingDirectory": ".\\"
    },
    "SingleProcess Debug": {
      "commandName": "Project",
      "commandLineArgs": "Daemon TestDebug /AppId:$(ProjectName)"
    }
  }
}
---

※ submodule 経由の場合

---
{
  "profiles": {
    "DebugHost Run": {
      "commandName": "Executable",
      "executablePath": "$(ProjectDir)\\..\\submodules\\IPA-DN-Cores\\Cores.NET\\Dev.Tools\\CompiledBin\\DebugHost.exe",
      "commandLineArgs": "restart $(ProjectName) dotnet exec $(TargetPath) Daemon Test",
      "workingDirectory": ".\\"
    },
    "SingleProcess Debug": {
      "commandName": "Project",
      "commandLineArgs": "Daemon TestDebug /AppId:$(ProjectName)"
    }
  }
}
---

・ Program.cs

以下を追加
---
using IPA.Cores.Basic;
using IPA.Cores.Helper.Basic;
using static IPA.Cores.Globals.Basic;
---

Main の内容を以下のように変更
---
            const string appName = "APP_NAME_HERE";

            return StandardMainFunctions.DaemonMain.DoMain(
                new CoresLibOptions(CoresMode.Application,
                    appName: appName,
                    defaultDebugMode: DebugMode.Debug,
                    defaultPrintStatToConsole: false,
                    defaultRecordLeakFullStack: false),
                args: args,
                getDaemonProc: () => new HttpServerDaemon<Startup>(appName, appName, new HttpServerOptions
                {
                    HttpPortsList = 80._SingleList(),
                    HttpsPortsList = 443._SingleList(),
                    UseKestrelWithIPACoreStack = true,
                    DebugKestrelToConsole = false,
                    UseSimpleBasicAuthentication = false,
                    HoldSimpleBasicAuthenticationDatabase = false,
                    AutomaticRedirectToHttpsIfPossible = true,
                }));
---

最初から書いてある CreateWebHostBuilder(args).Build().Run(); および
CreateWebHostBuilder() の実装はコメントアウトする。

・ Startup.cs
以下を追加
---
using IPA.Cores.Basic;
using IPA.Cores.Helper.Basic;
using static IPA.Cores.Globals.Basic;

using IPA.Cores.Web;
using IPA.Cores.Helper.Web;
using static IPA.Cores.Globals.Web;

using IPA.Cores.Codes;
using IPA.Cores.Helper.Codes;
using static IPA.Cores.Globals.Codes;
---

Startup クラスに以下を追記

---
readonly HttpServerStartupHelper StartupHelper;
readonly AspNetLib AspNetLib;
---

コンストラクタ:
---
// HttpServer ヘルパーの初期化
StartupHelper = new HttpServerStartupHelper(configuration);

// AspNetLib の初期化: 必要な機能のみ ON にすること
AspNetLib = new AspNetLib(configuration, AspNetLibFeatures.None);
---


ConfigureServices()
---
            // AspNetLib による設定を追加
            AspNetLib.ConfigureServices(StartupHelper, services);

            // 基本的な設定を追加
            StartupHelper.ConfigureServices(services);

            // リクエスト数制限機能を追加
            services.AddHttpRequestRateLimiter<HttpRequestRateLimiterHashKeys.SrcIPAddress>(_ => { });

            ////// Cookie 認証機能を追加
            //EasyCookieAuth.LoginFormMessage.TrySet("ログインが必要です。");
            //EasyCookieAuth.AuthenticationPasswordValidator = StartupHelper.SimpleBasicAuthenticationPasswordValidator;
            //EasyCookieAuth.ConfigureServices(services, !StartupHelper.ServerOptions.AutomaticRedirectToHttpsIfPossible);

            // Razor ページを追加
            services.AddRazorPages();

            // MVC 機能を追加
            services.AddControllersWithViews()
                .ConfigureMvcWithAspNetLib(AspNetLib);

            // シングルトンサービスの注入
            //services.AddSingleton(new Server());

            // 全ページ共通コンテキストの注入
            services.AddScoped<PageContext>();
---



Configure() に引数
---
, IHostApplicationLifetime lifetime
---
を追加。

Configure() 
---
            // リクエスト数制限
            app.UseHttpRequestRateLimiter<HttpRequestRateLimiterHashKeys.SrcIPAddress>();

            // wwwroot ディレクトリを static ファイルのルートとして追加
            StartupHelper.AddStaticFileProvider(Env.AppRootDir._CombinePath("wwwroot"));

            // AspNetLib による設定を追加
            AspNetLib.Configure(StartupHelper, app, env);

            // 基本的な設定を追加
            StartupHelper.Configure(app, env);

            // エラーページを追加
            if (StartupHelper.IsDevelopmentMode)
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            // エラーログを追加
            app.UseHttpExceptionLogger();

            // Static ファイルを追加
            app.UseStaticFiles();

            // ルーティングを有効可 (認証を利用する場合は認証前に呼び出す必要がある)
            app.UseRouting();

            // 認証・認可を実施
            app.UseAuthentication();
            app.UseAuthorization();

            // ルートマップを定義
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });

            // クリーンアップ動作を定義
            lifetime.ApplicationStopping.Register(() =>
            {
                //server._DisposeSafe();

                AspNetLib._DisposeSafe();
                StartupHelper._DisposeSafe();
            });
---


Views/_ViewImports.cshtml に以下を追加。

---

@using IPA.Cores.Basic;
@using IPA.Cores.Helper.Basic;
@using static IPA.Cores.Globals.Basic;

@using IPA.Cores.Web;
@using IPA.Cores.Helper.Web;
@using static IPA.Cores.Globals.Web;

@using IPA.Cores.Codes;
@using IPA.Cores.Helper.Codes;
@using static IPA.Cores.Globals.Codes;

@inject PageContext Page
---


Views/Shared/_Layout.cshtml の <title> 部分を以下のようにする。

---
    <title>@Page.FullTitle</title>
---


Views/Home/Index.cshtml の最初のコードの Title 部分を以下のようにする。

---
   Page.Title = "Top Page";
---



Context/PageContext.cs を作成する。
---
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Runtime.InteropServices;

using IPA.Cores.Basic;
using IPA.Cores.Helper.Basic;
using static IPA.Cores.Globals.Basic;

using IPA.Cores.Web;
using IPA.Cores.Helper.Web;
using static IPA.Cores.Globals.Web;

using IPA.Cores.Codes;
using IPA.Cores.Helper.Codes;
using static IPA.Cores.Globals.Codes;

using Microsoft.AspNetCore.Mvc.Razor;

namespace APP_NAME_HERE
{
    // APP_NAME_HERE 用のページコンテキスト
    public class PageContext : AspPageContext
    {
        public DateTimeOffset Now = DateTimeOffset.Now;

        // サイト名
        public PageContext()
        {
            this.SiteName = "APP_NAME_HERE";
        }
    }
}


---


Models/ErrorViewModel.cs  に以下を追加

---
        public Exception ErrorInfo { get; set; } = null!;
---

Controllers/UploaderController.cs

---
public class の定義に

[AutoValidateAntiforgeryToken]

を付ける。


public IActionResult Error() を以下に変更

            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier, ErrorInfo = this._GetLastError() });
---


