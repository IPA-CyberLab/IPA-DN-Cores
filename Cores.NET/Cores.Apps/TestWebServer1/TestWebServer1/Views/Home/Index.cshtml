@{
    ViewData["Title"] = "Test Page";
}

<div style="font-family: Consolas">
    <p>　</p>
    <p>@DtOffsetNow._ToDtStr(true)</p>
    <p>　</p>
    <p><b>Protocol:</b> @Context.Request.Protocol</p>
    <p><b>Is HTTPS:</b> @Context.Request.IsHttps.ToString()</p>
    <p><b>URL:</b> @Context.GetUrl()</p>
    <p><b>URL (Display):</b> @Microsoft.AspNetCore.Http.Extensions.UriHelper.GetDisplayUrl(Context.Request)</p>
    <p><b>Path:</b> @Context.Request.Path.ToString()</p>
    <p><b>QueryString:</b> @Context.Request.QueryString.ToString()</p>
    <p><b>PathAndQueryString:</b> @Context.Request._GetRequestPathAndQueryString()</p>
    <p>　</p>
    <p><b>Local Endpoint:</b> [@Context.Connection.LocalIpAddress!._UnmapIPv4().ToString()]:@Context.Connection.LocalPort.ToString()</p>
    <p><b>Remote Endpoint:</b> [@Context.Connection.RemoteIpAddress!._UnmapIPv4().ToString()]:@Context.Connection.RemotePort.ToString()</p>
    <p>　</p>
    <p>Query String Items:</p>
    @{
        foreach (var q in Context.Request.Query)
        {
            string tmp = $"<b>{q.Key._EncodeHtml()}</b>: {((string)q.Value)._EncodeHtml()}";
            <p>@Html.Raw(tmp)</p>
        }
    }
    <p>　</p>
    <p>Headers:</p>
    @{
        foreach (var h in Context.Request.Headers.Where(x => x.Key._IsSamei("cookie") == false))
        {
            string tmp = $"<b>{h.Key._EncodeHtml()}</b>: {((string)h.Value)._EncodeHtml()}";
            <p>@Html.Raw(tmp)</p>
        }
    }
    <p>　</p>
    <p>Snapshot Envs:</p>
    @{
        {
            EnvInfoSnapshot s = new EnvInfoSnapshot();
            var rw = s._GetFieldReaderWriter();
            foreach (var item in rw.FieldOrPropertyNamesList)
            {
                string tmp = $"<b>{item._EncodeHtml()}</b>: {((rw.GetValue(s, item) ?? "").ToString()._NonNull())._EncodeHtml()}";
                <p>@Html.Raw(tmp)</p>
            }
        }
    }
    <p>　</p>
    <p>Stats:</p>
    @{
        {
            CoresRuntimeStat s = new CoresRuntimeStat();

            s.Refresh(forceGc: true);

            var rw = s._GetFieldReaderWriter();
            foreach (var item in rw.FieldOrPropertyNamesList)
            {
                string tmp = $"<b>{item._EncodeHtml()}</b>: {((rw.GetValue(s, item) ?? "").ToString()._NonNull())._EncodeHtml()}";
                <p>@Html.Raw(tmp)</p>
            }
        }
    }
</div>

